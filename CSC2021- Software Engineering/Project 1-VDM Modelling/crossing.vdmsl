-- CSC2021 Modelling Coursework Feb 2017
-- Complete the coursework by extending this file as specified
-- in the coursework.
-- Submit your modified copy of this file together with
-- output file generated by using the Run() command.
module Crossing
imports from IO all, from VDMUtil all
definitions

state Crossing of 
  leftBank : Place
  rightBank : Place
  boatPos: Bank
  inv cr == Dangerous(cr.rightBank) and Dangerous(cr.leftBank) --checks the initial state doesnt break the rules
  init cr == cr = mk_Crossing({<Goat>,<Wolf>,<Cabbage>,<Farmer>},{},<Left>)
  end 
  
  
types

Passenger = <Goat> | <Wolf> | <Cabbage> | <Farmer>;

Bank = <Left> | <Right>;

Place = set of Passenger;


functions

Dangerous: set of Passenger -> bool
Dangerous(bank) == 
	bank<>({<Wolf>,<Goat>}) or bank<>({<Goat>,<Cabbage>}) ; -- a bank is checked for the two dangerous combinations of passengers 
	
operations

CrossRight: set of Passenger ==> ()  
CrossRight(passengers) == (
	rightBank:= rightBank union passengers; -- when the boat moves right, the passengers are added to rightBank
	leftBank:= leftBank \ passengers; -- the passengers are removed from leftBank
	boatPos := <Right>; -- the boat position is set to right
	
	)
	-- as well as being checked to see if they are dangerous, the banks are checked to make sure there are no duplicate passengers, and that the raft has at most 2 occupants, one of which is the farmer
	pre(<Farmer> in set passengers) and Dangerous(rightBank) and Dangerous(leftBank) and card passengers<=2 and (leftBank inter rightBank)= {};
	

CrossLeft: set of Passenger ==> ()  
CrossLeft(passengers) == (
	rightBank:= rightBank \ passengers; -- when the boat moves left, the passengers are removed from rightBank
	leftBank:= leftBank union passengers; -- the passengers are added to leftBank
	boatPos := <Left>; -- the boat position is set to left
)
-- as well as being checked to see if they are dangerous, the banks are checked to make sure there are no duplicate passengers, and that the raft has at most 2 occupants, one of which is the farmer
pre (<Farmer> in set passengers) and Dangerous(rightBank) and Dangerous(leftBank)and card passengers<=2 and (leftBank inter rightBank)= {} ;

Run: () ==> ()
Run() ==
 ( 
  fopen();  -- reopen output file, overwriting current contents
	fprintln("Start of run");
	fprintState();
	CrossRight({<Goat>,<Farmer>});
	fprintln("Farmer crosses right with goat");
	fprintState();
	CrossLeft({<Farmer>});
	fprintln("Farmer returns alone");
	fprintState();
	CrossRight({<Cabbage>,<Farmer>});
	fprintln("Farmer crosses right with cabbage");
	fprintState();
	CrossLeft({<Farmer>,<Goat>});
	fprintln("Farmer returns with goat");
	fprintState();
	CrossRight({<Farmer>,<Wolf>});
	fprintln("Farmer crosses right with wolf");
	fprintState();
	CrossLeft({<Farmer>});
	fprintln("Farmer returns alone");
	fprintState();
	CrossRight({<Farmer>,<Goat>});
	fprintln("Farmer crosses right with goat");
	fprintState();
	fprintln("Problem Solved");

    );
    
    
    
-- Output functions - should not need to edit below this line
 values
 outfile: seq of char = "crossing-run.txt";
 
 operations
 fopen: () ==> ()
 fopen() ==
  (dcl OK: bool;
   OK := IO`fecho(outfile, "", <start>);
   );
   
 fprint: seq of char ==> ()
 fprint(string) == 
  (dcl OK: bool;
   OK := IO`fecho(outfile, string, <append>););
 
 fprintln:  seq of char ==> ()
 fprintln(string) == fprint (string ^ "\n");
 
 fprintState:() ==> ()
 fprintState() == ( 
   fprintln("Crossing state:\n============");
   fprintln(toString(Crossing));
   );
 
   
types  -- build a union type for all types we might want to print
basic = int | nat | nat1 | real | bool | char | token;
defined = Passenger | Bank | Place | Crossing;
collection = set of basic | set of defined | seq of basic | seq of defined;
alltypes = basic | defined | collection

functions
 toString: alltypes -> seq of char
 toString(x) == 
   VDMUtil`val2seq_of_char[alltypes](x);  
   
end Crossing
